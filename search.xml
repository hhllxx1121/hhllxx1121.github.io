<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python转C</title>
      <link href="/2022/12/19/Python%E8%BD%ACC/"/>
      <url>/2022/12/19/Python%E8%BD%ACC/</url>
      
        <content type="html"><![CDATA[<h3 id="1-安装cython"><a href="#1-安装cython" class="headerlink" title="1. 安装cython"></a>1. 安装cython</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install cython</span><br></pre></td></tr></table></figure><h3 id="2-修改py文件"><a href="#2-修改py文件" class="headerlink" title="2. 修改py文件"></a>2. 修改py文件</h3><p>首先把Infrared.py文件的后缀改成Infrared.pyx，然后进入.pyx文件进行修改。只需要修改导出的函数，并且形参不能设置默认值（例如arg&#x3D;1是不行的）。修改方法是把def 改成<strong>cdef</strong>，并且在cdef后紧跟<strong>public</strong>。</p><p><img src="https://img-blog.csdnimg.cn/7362f8033f7c4537893e611399893384.png" alt="请添加图片描述"></p><p>在顶部加上下面这句注释，就没有警告了, # 也需要</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># cython:language_level=3</span></span><br></pre></td></tr></table></figure><h3 id="3-python转-c和-h"><a href="#3-python转-c和-h" class="headerlink" title="3. python转.c和.h"></a>3. python转.c和.h</h3><p>使用cython的命令进行转换</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cython Infrared.pyx</span><br></pre></td></tr></table></figure><h3 id="4-书写main-c文件"><a href="#4-书写main-c文件" class="headerlink" title="4. 书写main.c文件"></a>4. 书写main.c文件</h3><p>这一步是main.c去调用Python生成的c文件导出的那个函数。用箭头指出的名字都是要特别注意的，是要和文件名相同的</p><p><img src="https://img-blog.csdnimg.cn/cfbbd966324548388b2ef0dad0c51ed3.png" alt="请添加图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Python.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Infrared.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">  <span class="type">int</span> status=PyImport_AppendInittab(<span class="string">&quot;Infrared&quot;</span>, PyInit_Infrared);</span><br><span class="line">  <span class="keyword">if</span>(status==<span class="number">-1</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//error</span></span><br><span class="line">  &#125; </span><br><span class="line">  Py_Initialize();</span><br><span class="line">  PyObject *module = PyImport_ImportModule(<span class="string">&quot;Infrared&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(module==<span class="literal">NULL</span>)&#123;</span><br><span class="line">     Py_Finalize();</span><br><span class="line">     <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//error</span></span><br><span class="line">  &#125;</span><br><span class="line">  PyObject *binfile;</span><br><span class="line">  PyObject *output;</span><br><span class="line">  PyObject *threshold_seg;</span><br><span class="line">  binfile = Py_BuildValue(<span class="string">&quot;s&quot;</span>, <span class="string">&quot;./testdata/20221126-1-2.bin&quot;</span>);</span><br><span class="line">  output = Py_BuildValue(<span class="string">&quot;s&quot;</span>, <span class="string">&quot;./output/&quot;</span>);</span><br><span class="line">  threshold_seg = Py_BuildValue(<span class="string">&quot;f&quot;</span>, <span class="number">0.5</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;start...\n&quot;</span>);</span><br><span class="line">  Infrared_Imaging_Enhancing(binfile, output,threshold_seg);</span><br><span class="line">  Py_Finalize();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-执行gcc命令编译"><a href="#5-执行gcc命令编译" class="headerlink" title="5. 执行gcc命令编译"></a>5. 执行gcc命令编译</h3><p>-同时编译main.c和Infrared.c， -o是输出名字，-I指定的目录是寻找头文件的目录，-l指定寻找的库文件（大写L指定目录），</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c Infrared.c <span class="literal">-o</span> main <span class="literal">-I</span>/usr/include/python3.<span class="number">8</span>/ <span class="literal">-lpython3</span>.<span class="number">8</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -Cython </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stylegan2论文笔记</title>
      <link href="/2022/12/01/stylegan2%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/12/01/stylegan2%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>stylegan1存在伪影的问题，本文是在stylegan的基础上做出一点修改。作者说是Adain模块造成的，所以把这个模块改掉了,也改动了渐进式增长架构,解决图片粘住不动的问题。</p><span id="more"></span><h3 id="消除归一化导致的伪影"><a href="#消除归一化导致的伪影" class="headerlink" title="消除归一化导致的伪影"></a>消除归一化导致的伪影</h3><p><img src="https://img-blog.csdnimg.cn/e0219b9e330d4538b175739c26bf01e4.png" alt="image"></p><p>就算在生成图看的不明显，但是在生成器的中间特征图中，异常开始出现在64*64的分辨率附近，并且在后面特征图中也一直有，尤其在高分辨下更严重。作业把问题精确到了Adain中。</p><p>生成器架构的修改：</p><p><img src="https://img-blog.csdnimg.cn/6be0597aa6884e2cbda7f25c04ab9fd7.png" alt="image"></p><p>改动过程：a是原始的stylegan的合成网络，把Adain分成了两部分–归一化(Norm)和调制(Mod)，还把bias拿到了下面，这就变成了b。原始的stylegan在样式内部加了偏置和噪音，作者说偏置和噪声的加法在这里的影响不大，所以就把这个加法往后移，放在Norm后了(主要是不影响下面说的乘法和除法的合并)。而且归一化时直接把均值给去掉了，后面的norm和mod都是只有std，这就是到了c，在c上继续改动，现在的样式块就由调制，卷积和归一化组成，那我们在feature map作乘法和在卷积核上作乘法得到的结果是一样的 $w^&#96;<em>{ijk} &#x3D; s_i*w</em>{ijk}$。假设独立同分布的情况下,也把Norm操作除法也放在卷积核上。就得到了d。</p><p>这样就改动了之前的instance normalization。总的概括如下：</p><p><img src="https://img-blog.csdnimg.cn/6d03e808f3dd40488490fb087f621223.png" alt="在这里插入图片描述"></p><h3 id="图像质量和生成器平滑度"><a href="#图像质量和生成器平滑度" class="headerlink" title="图像质量和生成器平滑度"></a>图像质量和生成器平滑度</h3><p><img src="https://img-blog.csdnimg.cn/70e1284321e74ef3a3c2f8efd5119bf1.png" alt="image"></p><p>作者观察到了感知的图像质量和感知路径长度（PPL）之间的有趣关系，较小的 PPL（平滑的生成器映射）似乎与较高的整体图 像质量相关，而其他指标则看不到该变化。PPL 分数低实际上表示图像的质量高，反之亦然。在训练过程中通过鼓励低 PPL 来支持平滑的生成器映射可能会改善图像质量</p><h4 id="懒惰正则化"><a href="#懒惰正则化" class="headerlink" title="懒惰正则化"></a>懒惰正则化</h4><p>损失是由损失函数和正则项组成，优化的时候也是同时优化这两项的，lazy regularization就是正则项可以减少优化的次数，比如每16个minibatch才优化一次正则项，这样可以减少计算量，同时对效果也没什么影响。</p><h4 id="路径长度正则化"><a href="#路径长度正则化" class="headerlink" title="路径长度正则化"></a>路径长度正则化</h4><p>在生成人脸的同时，我们希望能够控制人脸的属性，不同的latent code能得到不同的人脸，当确定latent code变化的具体方向时，该方向上不同的大小应该对应了图像上某一个具体变化的不同幅度。为了达到这个目的，设计了 Path length regularization，它的原理也很简单，在图像上的梯度用图像乘上变换的梯度来表示，下列公式中w表示由latent code z得到的disentangled latent code，y表示图像，这个图像的像素是符合正态分布的，Jw是生成器g对w的一阶矩阵，表示图像在w上的变化，a是 $||J_w^Ty||_2$ 动态的移动平均值，随着优化动态调整，自动找到一个全局最优值。</p><h3 id="渐进式增长修正"><a href="#渐进式增长修正" class="headerlink" title="渐进式增长修正"></a>渐进式增长修正</h3><p><img src="https://img-blog.csdnimg.cn/41830dd568cd4f13a8325f35402d3cc9.png" alt="image"></p><p>这里门牙不管怎么转都是粘在固定位置的，和实际人脸转动不符合。这归因为之前太早确定了低分辨率的脸的形状，后面高分辨率主要对细节处理，改动不大。解决办法就是给它加了一个残差，</p><p><img src="https://img-blog.csdnimg.cn/662420862d6c460690764f6e84778255.png" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> -深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -gan系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo快速开始</title>
      <link href="/2022/11/27/hexo%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
      <url>/2022/11/27/hexo%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>关于静态博客的一些笔记</p><span id="more"></span><h3 id="更换电脑的操作"><a href="#更换电脑的操作" class="headerlink" title="更换电脑的操作"></a>更换电脑的操作</h3><ul><li><p>安装git</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install git</span><br></pre></td></tr></table></figure></li><li><p>设置git全局邮箱和用户名</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config <span class="literal">--global</span> user.name <span class="string">&quot;yourgithubname&quot;</span></span><br><span class="line">git config <span class="literal">--global</span> user.email <span class="string">&quot;yourgithubemail&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>设置ssh key</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh<span class="literal">-keygen</span> <span class="literal">-t</span> rsa <span class="literal">-C</span> <span class="string">&quot;youremail&quot;</span></span><br><span class="line"><span class="comment">#生成后填到github和coding上（有coding平台的话）</span></span><br><span class="line"><span class="comment">#验证是否成功</span></span><br><span class="line">ssh <span class="literal">-T</span> git@github.com</span><br><span class="line">ssh <span class="literal">-T</span> git@git.coding.net <span class="comment">#(有coding平台的话)</span></span><br></pre></td></tr></table></figure></li><li><p>安装nodejs</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt<span class="literal">-get</span> install nodejs</span><br><span class="line">sudo apt<span class="literal">-get</span> install npm</span><br></pre></td></tr></table></figure></li><li><p>安装hexo</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install hexo<span class="literal">-cli</span> <span class="literal">-g</span></span><br></pre></td></tr></table></figure></li></ul><p>但是已经不需要初始化了，</p><p>直接在任意文件夹下</p> <figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git<span class="selector-tag">@</span>………………</span><br></pre></td></tr></table></figure><p>然后进入克隆到的文件夹：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxx.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo<span class="literal">-deployer-git</span> <span class="literal">--save</span></span><br></pre></td></tr></table></figure><p>生成，部署：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后就可以开始写你的新博客了</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new newpage</span><br></pre></td></tr></table></figure><p><strong>Tips:</strong></p><ol><li>不要忘了，每次写完最好都把源文件上传一下</li></ol><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit –m <span class="string">&quot;xxxx&quot;</span></span><br><span class="line">git push </span><br></pre></td></tr></table></figure><ol start="2"><li>头部格式</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">top: 1  # 置顶越大优先级越高</span><br><span class="line">title: hexo快速开始</span><br><span class="line">date: 2022-11-27 22:28:55</span><br><span class="line">categories:</span><br><span class="line"><span class="code">    -工具</span></span><br><span class="line"><span class="code">tags:</span></span><br><span class="line"><span class="code">    -hexo  # 多个可用列表[,]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> -工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
